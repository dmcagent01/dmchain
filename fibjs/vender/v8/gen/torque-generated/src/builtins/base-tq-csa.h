#ifndef V8_GEN_TORQUE_GENERATED_SRC_BUILTINS_BASE_TQ_H_
#define V8_GEN_TORQUE_GENERATED_SRC_BUILTINS_BASE_TQ_H_

#include "src/compiler/code-assembler.h"
#include "src/codegen/code-stub-assembler.h"
#include "src/utils/utils.h"
#include "torque-generated/field-offsets-tq.h"
#include "torque-generated/csa-types-tq.h"

namespace v8 {
namespace internal {

compiler::TNode<JSObject> NewJSObject_55(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetDerivedMap_56(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<JSFunction> p_target, compiler::TNode<JSReceiver> p_newTarget);
compiler::TNode<JSObject> AllocateFastOrSlowJSObjectFromMap_57(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Map> p_map);
compiler::TNode<JSProxyRevocableResult> NewJSProxyRevocableResult_58(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<JSProxy> p_proxy, compiler::TNode<JSFunction> p_revoke);
compiler::TNode<JSArray> NewJSArray_59(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Map> p_map, compiler::TNode<FixedArrayBase> p_elements);
compiler::TNode<JSArray> NewJSArray_60(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
  compiler::TNode<UintPtrT> kSmiMax_61(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> TheHole_62(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> Null_63(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> Undefined_64(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> True_65(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> False_66(compiler::CodeAssemblerState* state_);
  compiler::TNode<String> kEmptyString_67(compiler::CodeAssemblerState* state_);
  compiler::TNode<String> kLengthString_68(compiler::CodeAssemblerState* state_);
  compiler::TNode<HeapNumber> kNaN_69(compiler::CodeAssemblerState* state_);
int31_t GetStartOfCaptureIndex_70(compiler::CodeAssemblerState* state_, int31_t p_captureIndex);
compiler::TNode<Object> ToPrimitiveDefault_71(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_v);
compiler::TNode<BoolT> ElementsKindNotEqual_72(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_k1, compiler::TNode<Int32T> p_k2);
compiler::TNode<BoolT> IsNumberEqual_73(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_a, compiler::TNode<Number> p_b);
compiler::TNode<BoolT> IsNumberNotEqual_74(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_a, compiler::TNode<Number> p_b);
compiler::TNode<BoolT> NumberIsLessThan_75(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_a, compiler::TNode<Number> p_b);
compiler::TNode<BoolT> NumberIsLessThanOrEqual_76(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_a, compiler::TNode<Number> p_b);
compiler::TNode<BoolT> NumberIsGreaterThan_77(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_a, compiler::TNode<Number> p_b);
compiler::TNode<BoolT> NumberIsGreaterThanOrEqual_78(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_a, compiler::TNode<Number> p_b);
compiler::TNode<BoolT> Float64IsNaN_79(compiler::CodeAssemblerState* state_, compiler::TNode<Float64T> p_n);
compiler::TNode<Number> Min_80(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_x, compiler::TNode<Number> p_y);
compiler::TNode<Number> Max_81(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_x, compiler::TNode<Number> p_y);
compiler::TNode<String> StringAdd_82(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<String> p_a, compiler::TNode<String> p_b);
compiler::TNode<Smi> Cast5ATSmi_83(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Smi> Cast13ATPositiveSmi_84(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Number> Cast20UT5ATSmi10HeapNumber_85(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast11ATUndefined_86(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Numeric> Cast29UT8ATBigInt5ATSmi10HeapNumber_87(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast9ATTheHole_88(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast9ATTheHole_89(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast6ATTrue_90(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast6ATTrue_91(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast7ATFalse_92(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast7ATFalse_93(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast17UT7ATFalse6ATTrue_94(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast17UT7ATFalse6ATTrue_95(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Object> Cast78UT8ATBigInt7ATFalse6ATNull5ATSmi6ATTrue11ATUndefined10HeapNumber6String6Symbol_96(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Object> Cast90UT8ATBigInt7ATFalse6ATNull5ATSmi6ATTrue11ATUndefined10HeapNumber10JSReceiver6String6Symbol_97(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Object> Cast100UT8ATBigInt7ATFalse6ATNull5ATSmi9ATTheHole6ATTrue11ATUndefined10HeapNumber10JSReceiver6String6Symbol_98(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Object> Cast30UT5ATSmi9ATTheHole10HeapNumber_99(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapObject> Cast10HeapObject_100(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label__CastError);
compiler::TNode<Oddball> Cast6ATNull_101(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast11ATUndefined_102(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedArray> Cast10FixedArray_103(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedDoubleArray> Cast16FixedDoubleArray_104(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedArray> Cast25ATSloppyArgumentsElements_105(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSDataView> Cast10JSDataView_106(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSProxy> Cast7JSProxy_107(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSStringIterator> Cast16JSStringIterator_108(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSTypedArray> Cast12JSTypedArray_109(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSTypedArray> Cast12JSTypedArray_110(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSReceiver> Cast71UT19ATCallableApiObject17ATCallableJSProxy15JSBoundFunction10JSFunction_111(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapObject> Cast84UT19ATCallableApiObject17ATCallableJSProxy11ATUndefined15JSBoundFunction10JSFunction_112(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast7JSArray_113(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArrayBuffer> Cast13JSArrayBuffer_114(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Context> Cast7Context_115(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<NativeContext> Cast15ATNativeContext_116(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSObject> Cast8JSObject_117(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<NumberDictionary> Cast18ATNumberDictionary_118(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<String> Cast6String_119(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast7Oddball_120(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Symbol> Cast6Symbol_121(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Symbol> Cast14ATPublicSymbol_122(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Symbol> Cast15ATPrivateSymbol_123(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Symbol> Cast14ATPublicSymbol_124(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Symbol> Cast15ATPrivateSymbol_125(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<String> Cast14ATDirectString_126(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSReceiver> Cast13ATConstructor_127(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapNumber> Cast10HeapNumber_128(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<BigInt> Cast8ATBigInt_129(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSRegExp> Cast8JSRegExp_130(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Map> Cast3Map_131(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSPrimitiveWrapper> Cast18JSPrimitiveWrapper_132(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArgumentsObjectWithLength> Cast27JSArgumentsObjectWithLength_133(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSRegExp> Cast14ATFastJSRegExp_134(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast13ATFastJSArray_135(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast20ATFastJSArrayForRead_136(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast20ATFastJSArrayForCopy_137(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast34ATFastJSArrayWithNoCustomIteration_138(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast41ATFastJSArrayForReadWithNoCustomIteration_139(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSReceiver> Cast10JSReceiver_140(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSFunction> Cast10JSFunction_141(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<DebugInfo> Cast9DebugInfo_142(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedArray> Cast14ATCoverageInfo_143(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapObject> Cast21UT6ATNull10JSReceiver_144(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Int32T> FromConstexpr7ATint3117ATconstexpr_int31_145(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Int32T> FromConstexpr7ATint3217ATconstexpr_int31_146(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Int32T> FromConstexpr7ATint3217ATconstexpr_int32_147(compiler::CodeAssemblerState* state_, int32_t p_i);
compiler::TNode<IntPtrT> FromConstexpr8ATintptr17ATconstexpr_int31_148(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<IntPtrT> FromConstexpr8ATintptr17ATconstexpr_int32_149(compiler::CodeAssemblerState* state_, int32_t p_i);
compiler::TNode<IntPtrT> FromConstexpr8ATintptr18ATconstexpr_intptr_150(compiler::CodeAssemblerState* state_, intptr_t p_i);
compiler::TNode<UintPtrT> FromConstexpr9ATuintptr19ATconstexpr_uintptr_151(compiler::CodeAssemblerState* state_, uintptr_t p_i);
compiler::TNode<Smi> FromConstexpr5ATSmi17ATconstexpr_int31_152(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Smi> FromConstexpr13ATPositiveSmi17ATconstexpr_int31_153(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<String> FromConstexpr6String18ATconstexpr_string_154(compiler::CodeAssemblerState* state_, const char* p_s);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber18ATconstexpr_uint32_155(compiler::CodeAssemblerState* state_, uint32_t p_i);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int32_156(compiler::CodeAssemblerState* state_, int32_t p_i);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber19ATconstexpr_float64_157(compiler::CodeAssemblerState* state_, double p_f);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int31_158(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber15ATconstexpr_Smi_159(compiler::CodeAssemblerState* state_, Smi p_s);
compiler::TNode<Smi> FromConstexpr5ATSmi15ATconstexpr_Smi_160(compiler::CodeAssemblerState* state_, Smi p_s);
compiler::TNode<Uint32T> FromConstexpr8ATuint3217ATconstexpr_int31_161(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<UintPtrT> FromConstexpr9ATuintptr17ATconstexpr_int31_162(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Float64T> FromConstexpr9ATfloat6417ATconstexpr_int31_163(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Float64T> FromConstexpr9ATfloat6419ATconstexpr_float64_164(compiler::CodeAssemblerState* state_, double p_i);
compiler::TNode<BoolT> FromConstexpr6ATbool16ATconstexpr_bool_165(compiler::CodeAssemblerState* state_, bool p_b);
compiler::TNode<Smi> FromConstexpr14ATLanguageMode24ATconstexpr_LanguageMode_166(compiler::CodeAssemblerState* state_, LanguageMode p_m);
compiler::TNode<Int32T> FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_167(compiler::CodeAssemblerState* state_, ElementsKind p_e);
compiler::TNode<Object> FromConstexpr20UT5ATSmi10HeapObject18ATconstexpr_string_168(compiler::CodeAssemblerState* state_, const char* p_s);
compiler::TNode<Object> FromConstexpr90UT8ATBigInt7ATFalse6ATNull5ATSmi6ATTrue11ATUndefined10HeapNumber10JSReceiver6String6Symbol18ATconstexpr_string_169(compiler::CodeAssemblerState* state_, const char* p_s);
compiler::TNode<IntPtrT> FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_170(compiler::CodeAssemblerState* state_, int32_t p_c);
compiler::TNode<IntPtrT> FromConstexpr13ATContextSlot23ATconstexpr_ContextSlot_171(compiler::CodeAssemblerState* state_, int32_t p_c);
compiler::TNode<Int32T> Convert7ATint3214ATElementsKind_172(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_elementsKind);
compiler::TNode<Number> Convert20UT5ATSmi10HeapNumber7ATint32_173(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_i);
compiler::TNode<IntPtrT> Convert8ATintptr7ATint32_174(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_i);
compiler::TNode<IntPtrT> Convert8ATintptr8ATuint32_175(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_i);
compiler::TNode<Smi> Convert5ATSmi7ATint32_176(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_i);
compiler::TNode<Number> Convert20UT5ATSmi10HeapNumber8ATuint32_177(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_ui);
compiler::TNode<Smi> Convert5ATSmi8ATuint32_178(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_ui);
compiler::TNode<UintPtrT> Convert9ATuintptr8ATuint32_179(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_ui);
compiler::TNode<Int32T> Convert7ATint327ATuint8_180(compiler::CodeAssemblerState* state_, compiler::TNode<Uint8T> p_i);
compiler::TNode<Int32T> Convert7ATint328ATuint16_181(compiler::CodeAssemblerState* state_, compiler::TNode<Uint16T> p_i);
compiler::TNode<Int32T> Convert7ATint328ATuint31_182(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_i);
compiler::TNode<Int32T> Convert7ATint328ATintptr_183(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<Smi> Convert5ATSmi8ATintptr_184(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<Uint32T> Convert8ATuint329ATuintptr_185(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui);
compiler::TNode<IntPtrT> Convert8ATintptr5ATSmi_186(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_s);
compiler::TNode<UintPtrT> Convert9ATuintptr13ATPositiveSmi_187(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_ps);
compiler::TNode<IntPtrT> Convert8ATintptr9ATuintptr_188(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui);
compiler::TNode<Smi> Convert13ATPositiveSmi8ATintptr_189(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<Smi> Convert13ATPositiveSmi9ATuintptr_190(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui, compiler::CodeAssemblerLabel* label_IfOverflow);
compiler::TNode<Smi> Convert13ATPositiveSmi8ATintptr_191(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i, compiler::CodeAssemblerLabel* label_IfOverflow);
compiler::TNode<Int32T> Convert7ATint325ATSmi_192(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_s);
compiler::TNode<Float64T> Convert9ATfloat6410HeapNumber_193(compiler::CodeAssemblerState* state_, compiler::TNode<HeapNumber> p_h);
compiler::TNode<Float64T> Convert9ATfloat6420UT5ATSmi10HeapNumber_194(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_n);
compiler::TNode<UintPtrT> Convert9ATuintptr20UT5ATSmi10HeapNumber_195(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_n);
compiler::TNode<Float64T> Convert9ATfloat649ATfloat32_196(compiler::CodeAssemblerState* state_, compiler::TNode<Float32T> p_f);
compiler::TNode<Float32T> Convert9ATfloat329ATfloat64_197(compiler::CodeAssemblerState* state_, compiler::TNode<Float64T> p_f);
compiler::TNode<Float32T> Convert9ATfloat3220UT5ATSmi10HeapNumber_198(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_n);
compiler::TNode<Number> Convert20UT5ATSmi10HeapNumber9ATfloat64_199(compiler::CodeAssemblerState* state_, compiler::TNode<Float64T> p_d);
compiler::TNode<Float64T> Convert9ATfloat649ATuintptr_200(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui);
compiler::TNode<Number> Convert20UT5ATSmi10HeapNumber9ATuintptr_201(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui);
compiler::TNode<UintPtrT> Convert9ATuintptr9ATfloat64_202(compiler::CodeAssemblerState* state_, compiler::TNode<Float64T> p_d);
compiler::TNode<UintPtrT> Convert9ATuintptr8ATintptr_203(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<UintPtrT> Convert9ATuintptr8ATRawPtr_204(compiler::CodeAssemblerState* state_, compiler::TNode<RawPtrT> p_r);
compiler::TNode<IntPtrT> Convert8ATintptr8ATRawPtr_205(compiler::CodeAssemblerState* state_, compiler::TNode<RawPtrT> p_r);
compiler::TNode<BInt> Convert6ATbint7ATint32_206(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_v);
compiler::TNode<BInt> Convert6ATbint8ATintptr_207(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_v);
compiler::TNode<BInt> Convert6ATbint5ATSmi_208(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_v);
  compiler::TNode<Map> kFixedArrayMap_209(compiler::CodeAssemblerState* state_);
  compiler::TNode<Map> kCOWMap_210(compiler::CodeAssemblerState* state_);
  compiler::TNode<ByteArray> kEmptyByteArray_211(compiler::CodeAssemblerState* state_);
  compiler::TNode<FixedArray> kEmptyFixedArray_212(compiler::CodeAssemblerState* state_);
void StoreFastJSArrayLength_213(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_array, compiler::TNode<Smi> p_length);
void StoreFixedDoubleArrayDirect_214(compiler::CodeAssemblerState* state_, compiler::TNode<FixedDoubleArray> p_a, compiler::TNode<Smi> p_i, compiler::TNode<Number> p_v);
void StoreFixedArrayDirect_215(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArray> p_a, compiler::TNode<Smi> p_i, compiler::TNode<Object> p_v);
compiler::TNode<Int32T> FastHoleyElementsKind_216(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_kind);
compiler::TNode<Int32T> AllowDoubleElements_217(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_kind);
compiler::TNode<Int32T> AllowNonNumberElements_218(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_kind);
compiler::TNode<JSFunction> GetObjectFunction_219(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<JSReceiver> GetArrayBufferFunction_220(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<JSFunction> GetArrayBufferNoInitFunction_221(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetFastPackedElementsJSArrayMap_222(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetFastPackedSmiElementsJSArrayMap_223(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetProxyRevocableResultMap_224(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetIteratorResultMap_225(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetInitialStringIteratorMap_226(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<JSReceiver> GetReflectApply_227(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<RegExpMatchInfo> GetRegExpLastMatchInfo_228(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
void TorqueMoveElementsSmi_229(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArray> p_elements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
void TorqueMoveElements_230(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArray> p_elements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
void TorqueMoveElements_231(compiler::CodeAssemblerState* state_, compiler::TNode<FixedDoubleArray> p_elements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
void TorqueCopyElements_232(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArray> p_dstElements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<FixedArray> p_srcElements, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
void TorqueCopyElements_233(compiler::CodeAssemblerState* state_, compiler::TNode<FixedDoubleArray> p_dstElements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<FixedDoubleArray> p_srcElements, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
compiler::TNode<Object> LoadElementNoHole10FixedArray_234(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<JSArray> p_a, compiler::TNode<Smi> p_index, compiler::CodeAssemblerLabel* label_IfHole);
compiler::TNode<Object> LoadElementNoHole16FixedDoubleArray_235(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<JSArray> p_a, compiler::TNode<Smi> p_index, compiler::CodeAssemblerLabel* label_IfHole);
TorqueStructFastJSArrayWitness NewFastJSArrayWitness_236(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_array);
TorqueStructFastJSArrayForReadWitness NewFastJSArrayForReadWitness_237(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_array);
compiler::TNode<BoolT> NumberIsNaN_238(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_number);
compiler::TNode<BoolT> IsForceSlowPath_239(compiler::CodeAssemblerState* state_);
compiler::TNode<BoolT> ToBoolean_240(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_obj);
compiler::TNode<Object> RequireObjectCoercible_241(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_value, const char* p_name);
compiler::TNode<BoolT> SameValue_242(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_a, compiler::TNode<Object> p_b);
compiler::TNode<Number> ToIndex_243(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_input, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_RangeError);
compiler::TNode<Number> GetLengthProperty_244(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSReceiver> GetMethod_245(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, const char* p_name, compiler::CodeAssemblerLabel* label_IfNullOrUndefined);
compiler::TNode<BoolT> IsFastJSArray_246(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::TNode<Context> p_context);
void BranchIfFastJSArray_247(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIfFastJSArrayForRead_248(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
compiler::TNode<BoolT> IsFastJSArrayWithNoCustomIteration_249(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<BoolT> IsFastJSArrayForReadWithNoCustomIteration_250(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<String> ToStringImpl_251(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
void VerifiedUnreachable_252(compiler::CodeAssemblerState* state_);
compiler::TNode<BoolT> Float64IsSomeInfinity_253(compiler::CodeAssemblerState* state_, compiler::TNode<Float64T> p_value);
compiler::TNode<BoolT> IsIntegerOrSomeInfinity_254(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o);
compiler::TNode<Object> ReplaceTheHoleWithUndefined_255(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o);
compiler::TNode<Map> LoadHeapObjectMap_490(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o);
void StoreHeapObjectMap_491(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::TNode<Map> p_v);
compiler::TNode<Smi> LoadContextLength_492(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextLength_493(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<ScopeInfo> LoadContextScopeInfo_494(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextScopeInfo_495(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<ScopeInfo> p_v);
compiler::TNode<Object> LoadContextPrevious_496(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextPrevious_497(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadContextExtension_498(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextExtension_499(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadContextNativeContext_500(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextNativeContext_501(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSReceiverPropertiesOrHash_502(compiler::CodeAssemblerState* state_, compiler::TNode<JSReceiver> p_o);
void StoreJSReceiverPropertiesOrHash_503(compiler::CodeAssemblerState* state_, compiler::TNode<JSReceiver> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Float64T> LoadHeapNumberValue_504(compiler::CodeAssemblerState* state_, compiler::TNode<HeapNumber> p_o);
void StoreHeapNumberValue_505(compiler::CodeAssemblerState* state_, compiler::TNode<HeapNumber> p_o, compiler::TNode<Float64T> p_v);
compiler::TNode<Float64T> LoadOddballToNumberRaw_506(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballToNumberRaw_507(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<Float64T> p_v);
compiler::TNode<String> LoadOddballToString_508(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballToString_509(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<String> p_v);
compiler::TNode<Number> LoadOddballToNumber_510(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballToNumber_511(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<Number> p_v);
compiler::TNode<String> LoadOddballTypeOf_512(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballTypeOf_513(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<String> p_v);
compiler::TNode<Smi> LoadOddballKind_514(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballKind_515(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Uint32T> LoadNameHashField_516(compiler::CodeAssemblerState* state_, compiler::TNode<Name> p_o);
void StoreNameHashField_517(compiler::CodeAssemblerState* state_, compiler::TNode<Name> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<Int32T> LoadSymbolFlags_518(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o);
void StoreSymbolFlags_519(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Object> LoadSymbolName_520(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o);
void StoreSymbolName_521(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Int32T> LoadStringLength_522(compiler::CodeAssemblerState* state_, compiler::TNode<String> p_o);
void StoreStringLength_523(compiler::CodeAssemblerState* state_, compiler::TNode<String> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Smi> LoadFixedArrayBaseLength_524(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArrayBase> p_o);
void StoreFixedArrayBaseLength_525(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArrayBase> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<String> LoadConsStringFirst_526(compiler::CodeAssemblerState* state_, compiler::TNode<ConsString> p_o);
void StoreConsStringFirst_527(compiler::CodeAssemblerState* state_, compiler::TNode<ConsString> p_o, compiler::TNode<String> p_v);
compiler::TNode<String> LoadConsStringSecond_528(compiler::CodeAssemblerState* state_, compiler::TNode<ConsString> p_o);
void StoreConsStringSecond_529(compiler::CodeAssemblerState* state_, compiler::TNode<ConsString> p_o, compiler::TNode<String> p_v);
compiler::TNode<RawPtrT> LoadExternalStringResource_530(compiler::CodeAssemblerState* state_, compiler::TNode<ExternalString> p_o);
void StoreExternalStringResource_531(compiler::CodeAssemblerState* state_, compiler::TNode<ExternalString> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<RawPtrT> LoadExternalStringResourceData_532(compiler::CodeAssemblerState* state_, compiler::TNode<ExternalString> p_o);
void StoreExternalStringResourceData_533(compiler::CodeAssemblerState* state_, compiler::TNode<ExternalString> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<String> LoadSlicedStringParent_534(compiler::CodeAssemblerState* state_, compiler::TNode<SlicedString> p_o);
void StoreSlicedStringParent_535(compiler::CodeAssemblerState* state_, compiler::TNode<SlicedString> p_o, compiler::TNode<String> p_v);
compiler::TNode<Smi> LoadSlicedStringOffset_536(compiler::CodeAssemblerState* state_, compiler::TNode<SlicedString> p_o);
void StoreSlicedStringOffset_537(compiler::CodeAssemblerState* state_, compiler::TNode<SlicedString> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<String> LoadThinStringActual_538(compiler::CodeAssemblerState* state_, compiler::TNode<ThinString> p_o);
void StoreThinStringActual_539(compiler::CodeAssemblerState* state_, compiler::TNode<ThinString> p_o, compiler::TNode<String> p_v);
compiler::TNode<Object> LoadTuple2Value1_540(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple2> p_o);
void StoreTuple2Value1_541(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple2> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTuple2Value2_542(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple2> p_o);
void StoreTuple2Value2_543(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple2> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTuple3Value3_544(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple3> p_o);
void StoreTuple3Value3_545(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple3> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadWeakFixedArrayLength_546(compiler::CodeAssemblerState* state_, compiler::TNode<WeakFixedArray> p_o);
void StoreWeakFixedArrayLength_547(compiler::CodeAssemblerState* state_, compiler::TNode<WeakFixedArray> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Uint8T> LoadMapInstanceSizeInWords_548(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapInstanceSizeInWords_549(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint8T> LoadMapInObjectPropertiesStartOrConstructorFunctionIndex_550(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapInObjectPropertiesStartOrConstructorFunctionIndex_551(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint8T> LoadMapUsedOrUnusedInstanceSizeInWords_552(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapUsedOrUnusedInstanceSizeInWords_553(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint8T> LoadMapVisitorId_554(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapVisitorId_555(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint16T> LoadMapInstanceType_556(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapInstanceType_557(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint8T> LoadMapBitField_558(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapBitField_559(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint8T> LoadMapBitField2_560(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapBitField2_561(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint32T> LoadMapBitField3_562(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapBitField3_563(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<Uint32T> LoadMapOptionalPadding_564(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapOptionalPadding_565(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<HeapObject> LoadMapPrototype_566(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapPrototype_567(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadMapConstructorOrBackPointer_568(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapConstructorOrBackPointer_569(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Object> p_v);
compiler::TNode<DescriptorArray> LoadMapInstanceDescriptors_570(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapInstanceDescriptors_571(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<DescriptorArray> p_v);
compiler::TNode<LayoutDescriptor> LoadMapLayoutDescriptor_572(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapLayoutDescriptor_573(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<LayoutDescriptor> p_v);
compiler::TNode<WeakFixedArray> LoadMapDependentCode_574(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapDependentCode_575(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<WeakFixedArray> p_v);
compiler::TNode<Object> LoadMapPrototypeValidityCell_576(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapPrototypeValidityCell_577(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadMapTransitionsOrPrototypeInfo_578(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapTransitionsOrPrototypeInfo_579(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadEnumCacheKeys_580(compiler::CodeAssemblerState* state_, compiler::TNode<EnumCache> p_o);
void StoreEnumCacheKeys_581(compiler::CodeAssemblerState* state_, compiler::TNode<EnumCache> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<FixedArray> LoadEnumCacheIndices_582(compiler::CodeAssemblerState* state_, compiler::TNode<EnumCache> p_o);
void StoreEnumCacheIndices_583(compiler::CodeAssemblerState* state_, compiler::TNode<EnumCache> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<ByteArray> LoadSourcePositionTableWithFrameCacheSourcePositionTable_584(compiler::CodeAssemblerState* state_, compiler::TNode<SourcePositionTableWithFrameCache> p_o);
void StoreSourcePositionTableWithFrameCacheSourcePositionTable_585(compiler::CodeAssemblerState* state_, compiler::TNode<SourcePositionTableWithFrameCache> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<Object> LoadSourcePositionTableWithFrameCacheStackFrameCache_586(compiler::CodeAssemblerState* state_, compiler::TNode<SourcePositionTableWithFrameCache> p_o);
void StoreSourcePositionTableWithFrameCacheStackFrameCache_587(compiler::CodeAssemblerState* state_, compiler::TNode<SourcePositionTableWithFrameCache> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Uint16T> LoadDescriptorArrayNumberOfAllDescriptors_588(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayNumberOfAllDescriptors_589(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint16T> LoadDescriptorArrayNumberOfDescriptors_590(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayNumberOfDescriptors_591(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint16T> LoadDescriptorArrayRawNumberOfMarkedDescriptors_592(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayRawNumberOfMarkedDescriptors_593(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint16T> LoadDescriptorArrayFiller16Bits_594(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayFiller16Bits_595(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<EnumCache> LoadDescriptorArrayEnumCache_596(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayEnumCache_597(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<EnumCache> p_v);
compiler::TNode<FixedArrayBase> LoadJSObjectElements_598(compiler::CodeAssemblerState* state_, compiler::TNode<JSObject> p_o);
void StoreJSObjectElements_599(compiler::CodeAssemblerState* state_, compiler::TNode<JSObject> p_o, compiler::TNode<FixedArrayBase> p_v);
compiler::TNode<SharedFunctionInfo> LoadJSFunctionSharedFunctionInfo_600(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionSharedFunctionInfo_601(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<SharedFunctionInfo> p_v);
compiler::TNode<Context> LoadJSFunctionContext_602(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionContext_603(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<Context> p_v);
compiler::TNode<FeedbackCell> LoadJSFunctionFeedbackCell_604(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionFeedbackCell_605(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<FeedbackCell> p_v);
compiler::TNode<Code> LoadJSFunctionCode_606(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionCode_607(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<Code> p_v);
compiler::TNode<HeapObject> LoadJSFunctionPrototypeOrInitialMap_608(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionPrototypeOrInitialMap_609(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadJSProxyTarget_610(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxy> p_o);
void StoreJSProxyTarget_611(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxy> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadJSProxyHandler_612(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxy> p_o);
void StoreJSProxyHandler_613(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxy> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadJSProxyRevocableResultProxy_614(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxyRevocableResult> p_o);
void StoreJSProxyRevocableResultProxy_615(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxyRevocableResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSProxyRevocableResultRevoke_616(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxyRevocableResult> p_o);
void StoreJSProxyRevocableResultRevoke_617(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxyRevocableResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSGlobalProxyNativeContext_618(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalProxy> p_o);
void StoreJSGlobalProxyNativeContext_619(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalProxy> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSPrimitiveWrapperValue_620(compiler::CodeAssemblerState* state_, compiler::TNode<JSPrimitiveWrapper> p_o);
void StoreJSPrimitiveWrapperValue_621(compiler::CodeAssemblerState* state_, compiler::TNode<JSPrimitiveWrapper> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSArgumentsObjectWithLengthLength_622(compiler::CodeAssemblerState* state_, compiler::TNode<JSArgumentsObjectWithLength> p_o);
void StoreJSArgumentsObjectWithLengthLength_623(compiler::CodeAssemblerState* state_, compiler::TNode<JSArgumentsObjectWithLength> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSSloppyArgumentsObjectCallee_624(compiler::CodeAssemblerState* state_, compiler::TNode<JSSloppyArgumentsObject> p_o);
void StoreJSSloppyArgumentsObjectCallee_625(compiler::CodeAssemblerState* state_, compiler::TNode<JSSloppyArgumentsObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<JSReceiver> LoadJSArrayIteratorIteratedObject_626(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o);
void StoreJSArrayIteratorIteratedObject_627(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Number> LoadJSArrayIteratorNextIndex_628(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o);
void StoreJSArrayIteratorNextIndex_629(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o, compiler::TNode<Number> p_v);
compiler::TNode<Smi> LoadJSArrayIteratorKind_630(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o);
void StoreJSArrayIteratorKind_631(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Number> LoadJSArrayLength_632(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_o);
void StoreJSArrayLength_633(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_o, compiler::TNode<Number> p_v);
compiler::TNode<BoolT> _method_JSArray_IsEmpty(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_this);
compiler::TNode<Object> LoadCallHandlerInfoCallback_634(compiler::CodeAssemblerState* state_, compiler::TNode<CallHandlerInfo> p_o);
void StoreCallHandlerInfoCallback_635(compiler::CodeAssemblerState* state_, compiler::TNode<CallHandlerInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadCallHandlerInfoJsCallback_636(compiler::CodeAssemblerState* state_, compiler::TNode<CallHandlerInfo> p_o);
void StoreCallHandlerInfoJsCallback_637(compiler::CodeAssemblerState* state_, compiler::TNode<CallHandlerInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadCallHandlerInfoData_638(compiler::CodeAssemblerState* state_, compiler::TNode<CallHandlerInfo> p_o);
void StoreCallHandlerInfoData_639(compiler::CodeAssemblerState* state_, compiler::TNode<CallHandlerInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadModuleExports_640(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o);
void StoreModuleExports_641(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Smi> LoadModuleHash_642(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o);
void StoreModuleHash_643(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadModuleStatus_644(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o);
void StoreModuleStatus_645(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadModuleModuleNamespace_646(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o);
void StoreModuleModuleNamespace_647(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadModuleException_648(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o);
void StoreModuleException_649(compiler::CodeAssemblerState* state_, compiler::TNode<Module> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadSourceTextModuleCode_650(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleCode_651(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<FixedArray> LoadSourceTextModuleRegularExports_652(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleRegularExports_653(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<FixedArray> LoadSourceTextModuleRegularImports_654(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleRegularImports_655(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<FixedArray> LoadSourceTextModuleRequestedModules_656(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleRequestedModules_657(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Script> LoadSourceTextModuleScript_658(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleScript_659(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<Script> p_v);
compiler::TNode<HeapObject> LoadSourceTextModuleImportMeta_660(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleImportMeta_661(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadSourceTextModuleDfsIndex_662(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleDfsIndex_663(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadSourceTextModuleDfsAncestorIndex_664(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o);
void StoreSourceTextModuleDfsAncestorIndex_665(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModule> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<String> LoadSyntheticModuleName_666(compiler::CodeAssemblerState* state_, compiler::TNode<SyntheticModule> p_o);
void StoreSyntheticModuleName_667(compiler::CodeAssemblerState* state_, compiler::TNode<SyntheticModule> p_o, compiler::TNode<String> p_v);
compiler::TNode<FixedArray> LoadSyntheticModuleExportNames_668(compiler::CodeAssemblerState* state_, compiler::TNode<SyntheticModule> p_o);
void StoreSyntheticModuleExportNames_669(compiler::CodeAssemblerState* state_, compiler::TNode<SyntheticModule> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Foreign> LoadSyntheticModuleEvaluationSteps_670(compiler::CodeAssemblerState* state_, compiler::TNode<SyntheticModule> p_o);
void StoreSyntheticModuleEvaluationSteps_671(compiler::CodeAssemblerState* state_, compiler::TNode<SyntheticModule> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<Module> LoadJSModuleNamespaceModule_672(compiler::CodeAssemblerState* state_, compiler::TNode<JSModuleNamespace> p_o);
void StoreJSModuleNamespaceModule_673(compiler::CodeAssemblerState* state_, compiler::TNode<JSModuleNamespace> p_o, compiler::TNode<Module> p_v);
compiler::TNode<Object> LoadJSWeakCollectionTable_674(compiler::CodeAssemblerState* state_, compiler::TNode<JSWeakCollection> p_o);
void StoreJSWeakCollectionTable_675(compiler::CodeAssemblerState* state_, compiler::TNode<JSWeakCollection> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSCollectionIteratorTable_676(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollectionIterator> p_o);
void StoreJSCollectionIteratorTable_677(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollectionIterator> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSCollectionIteratorIndex_678(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollectionIterator> p_o);
void StoreJSCollectionIteratorIndex_679(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollectionIterator> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadJSMessageObjectMessageType_680(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectMessageType_681(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadJSMessageObjectArguments_682(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectArguments_683(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Script> LoadJSMessageObjectScript_684(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectScript_685(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Script> p_v);
compiler::TNode<Object> LoadJSMessageObjectStackFrames_686(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectStackFrames_687(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadJSMessageObjectSharedInfo_688(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectSharedInfo_689(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadJSMessageObjectBytecodeOffset_690(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectBytecodeOffset_691(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadJSMessageObjectStartPosition_692(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectStartPosition_693(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadJSMessageObjectEndPosition_694(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectEndPosition_695(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadJSMessageObjectErrorLevel_696(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectErrorLevel_697(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWeakArrayListCapacity_698(compiler::CodeAssemblerState* state_, compiler::TNode<WeakArrayList> p_o);
void StoreWeakArrayListCapacity_699(compiler::CodeAssemblerState* state_, compiler::TNode<WeakArrayList> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWeakArrayListLength_700(compiler::CodeAssemblerState* state_, compiler::TNode<WeakArrayList> p_o);
void StoreWeakArrayListLength_701(compiler::CodeAssemblerState* state_, compiler::TNode<WeakArrayList> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadPrototypeInfoJsModuleNamespace_702(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoJsModuleNamespace_703(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadPrototypeInfoPrototypeUsers_704(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoPrototypeUsers_705(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadPrototypeInfoRegistrySlot_706(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoRegistrySlot_707(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadPrototypeInfoValidityCell_708(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoValidityCell_709(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadPrototypeInfoObjectCreateMap_710(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoObjectCreateMap_711(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadPrototypeInfoBitField_712(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoBitField_713(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptSource_714(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptSource_715(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadScriptName_716(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptName_717(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptLineOffset_718(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptLineOffset_719(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadScriptColumnOffset_720(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptColumnOffset_721(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptContext_722(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptContext_723(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptScriptType_724(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptScriptType_725(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptLineEnds_726(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptLineEnds_727(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptId_728(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptId_729(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptEvalFromSharedOrWrappedArguments_730(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptEvalFromSharedOrWrappedArguments_731(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptEvalFromPosition_732(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptEvalFromPosition_733(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptSharedFunctionInfos_734(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptSharedFunctionInfos_735(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptFlags_736(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptFlags_737(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptSourceUrl_738(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptSourceUrl_739(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadScriptSourceMappingUrl_740(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptSourceMappingUrl_741(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadScriptHostDefinedOptions_742(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptHostDefinedOptions_743(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadEmbedderDataArrayLength_744(compiler::CodeAssemblerState* state_, compiler::TNode<EmbedderDataArray> p_o);
void StoreEmbedderDataArrayLength_745(compiler::CodeAssemblerState* state_, compiler::TNode<EmbedderDataArray> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Int32T> LoadPreparseDataDataLength_746(compiler::CodeAssemblerState* state_, compiler::TNode<PreparseData> p_o);
void StorePreparseDataDataLength_747(compiler::CodeAssemblerState* state_, compiler::TNode<PreparseData> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadPreparseDataInnerLength_748(compiler::CodeAssemblerState* state_, compiler::TNode<PreparseData> p_o);
void StorePreparseDataInnerLength_749(compiler::CodeAssemblerState* state_, compiler::TNode<PreparseData> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<BytecodeArray> LoadInterpreterDataBytecodeArray_750(compiler::CodeAssemblerState* state_, compiler::TNode<InterpreterData> p_o);
void StoreInterpreterDataBytecodeArray_751(compiler::CodeAssemblerState* state_, compiler::TNode<InterpreterData> p_o, compiler::TNode<BytecodeArray> p_v);
compiler::TNode<Code> LoadInterpreterDataInterpreterTrampoline_752(compiler::CodeAssemblerState* state_, compiler::TNode<InterpreterData> p_o);
void StoreInterpreterDataInterpreterTrampoline_753(compiler::CodeAssemblerState* state_, compiler::TNode<InterpreterData> p_o, compiler::TNode<Code> p_v);
compiler::TNode<Object> LoadSharedFunctionInfoFunctionData_754(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFunctionData_755(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadSharedFunctionInfoNameOrScopeInfo_756(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoNameOrScopeInfo_757(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata_758(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata_759(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadSharedFunctionInfoScriptOrDebugInfo_760(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoScriptOrDebugInfo_761(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Int16T> LoadSharedFunctionInfoLength_762(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoLength_763(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int16T> p_v);
compiler::TNode<Uint16T> LoadSharedFunctionInfoFormalParameterCount_764(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFormalParameterCount_765(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint16T> LoadSharedFunctionInfoExpectedNofProperties_766(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoExpectedNofProperties_767(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Int16T> LoadSharedFunctionInfoFunctionTokenOffset_768(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFunctionTokenOffset_769(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int16T> p_v);
compiler::TNode<Int32T> LoadSharedFunctionInfoFlags_770(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFlags_771(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadSharedFunctionInfoFunctionLiteralId_772(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFunctionLiteralId_773(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<String> LoadUncompiledDataInferredName_774(compiler::CodeAssemblerState* state_, compiler::TNode<UncompiledData> p_o);
void StoreUncompiledDataInferredName_775(compiler::CodeAssemblerState* state_, compiler::TNode<UncompiledData> p_o, compiler::TNode<String> p_v);
compiler::TNode<Int32T> LoadUncompiledDataStartPosition_776(compiler::CodeAssemblerState* state_, compiler::TNode<UncompiledData> p_o);
void StoreUncompiledDataStartPosition_777(compiler::CodeAssemblerState* state_, compiler::TNode<UncompiledData> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadUncompiledDataEndPosition_778(compiler::CodeAssemblerState* state_, compiler::TNode<UncompiledData> p_o);
void StoreUncompiledDataEndPosition_779(compiler::CodeAssemblerState* state_, compiler::TNode<UncompiledData> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<PreparseData> LoadUncompiledDataWithPreparseDataPreparseData_780(compiler::CodeAssemblerState* state_, compiler::TNode<UncompiledDataWithPreparseData> p_o);
void StoreUncompiledDataWithPreparseDataPreparseData_781(compiler::CodeAssemblerState* state_, compiler::TNode<UncompiledDataWithPreparseData> p_o, compiler::TNode<PreparseData> p_v);
compiler::TNode<JSReceiver> LoadJSBoundFunctionBoundTargetFunction_782(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o);
void StoreJSBoundFunctionBoundTargetFunction_783(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Object> LoadJSBoundFunctionBoundThis_784(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o);
void StoreJSBoundFunctionBoundThis_785(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadJSBoundFunctionBoundArguments_786(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o);
void StoreJSBoundFunctionBoundArguments_787(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<RawPtrT> LoadForeignForeignAddress_788(compiler::CodeAssemblerState* state_, compiler::TNode<Foreign> p_o);
void StoreForeignForeignAddress_789(compiler::CodeAssemblerState* state_, compiler::TNode<Foreign> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<Smi> LoadFreeSpaceSize_790(compiler::CodeAssemblerState* state_, compiler::TNode<FreeSpace> p_o);
void StoreFreeSpaceSize_791(compiler::CodeAssemblerState* state_, compiler::TNode<FreeSpace> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadFreeSpaceNext_792(compiler::CodeAssemblerState* state_, compiler::TNode<FreeSpace> p_o);
void StoreFreeSpaceNext_793(compiler::CodeAssemblerState* state_, compiler::TNode<FreeSpace> p_o, compiler::TNode<Object> p_v);
compiler::TNode<UintPtrT> LoadJSArrayBufferByteLength_794(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBuffer> p_o);
void StoreJSArrayBufferByteLength_795(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBuffer> p_o, compiler::TNode<UintPtrT> p_v);
compiler::TNode<RawPtrT> LoadJSArrayBufferBackingStore_796(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBuffer> p_o);
void StoreJSArrayBufferBackingStore_797(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBuffer> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<JSArrayBuffer> LoadJSArrayBufferViewBuffer_798(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o);
void StoreJSArrayBufferViewBuffer_799(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<JSArrayBuffer> p_v);
compiler::TNode<UintPtrT> LoadJSArrayBufferViewByteOffset_800(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o);
void StoreJSArrayBufferViewByteOffset_801(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<UintPtrT> p_v);
compiler::TNode<UintPtrT> LoadJSArrayBufferViewByteLength_802(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o);
void StoreJSArrayBufferViewByteLength_803(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<UintPtrT> p_v);
compiler::TNode<UintPtrT> LoadJSTypedArrayLength_804(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o);
void StoreJSTypedArrayLength_805(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o, compiler::TNode<UintPtrT> p_v);
compiler::TNode<RawPtrT> LoadJSTypedArrayExternalPointer_806(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o);
void StoreJSTypedArrayExternalPointer_807(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<Object> LoadJSTypedArrayBasePointer_808(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o);
void StoreJSTypedArrayBasePointer_809(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSCollectionTable_810(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollection> p_o);
void StoreJSCollectionTable_811(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollection> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateValue_812(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateValue_813(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateYear_814(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateYear_815(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateMonth_816(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateMonth_817(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateDay_818(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateDay_819(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateWeekday_820(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateWeekday_821(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateHour_822(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateHour_823(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateMin_824(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateMin_825(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateSec_826(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateSec_827(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateCacheStamp_828(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateCacheStamp_829(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<NativeContext> LoadJSGlobalObjectNativeContext_830(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalObject> p_o);
void StoreJSGlobalObjectNativeContext_831(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalObject> p_o, compiler::TNode<NativeContext> p_v);
compiler::TNode<JSGlobalProxy> LoadJSGlobalObjectGlobalProxy_832(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalObject> p_o);
void StoreJSGlobalObjectGlobalProxy_833(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalObject> p_o, compiler::TNode<JSGlobalProxy> p_v);
compiler::TNode<JSReceiver> LoadJSAsyncFromSyncIteratorSyncIterator_834(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFromSyncIterator> p_o);
void StoreJSAsyncFromSyncIteratorSyncIterator_835(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFromSyncIterator> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Object> LoadJSAsyncFromSyncIteratorNext_836(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFromSyncIterator> p_o);
void StoreJSAsyncFromSyncIteratorNext_837(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFromSyncIterator> p_o, compiler::TNode<Object> p_v);
compiler::TNode<String> LoadJSStringIteratorString_838(compiler::CodeAssemblerState* state_, compiler::TNode<JSStringIterator> p_o);
void StoreJSStringIteratorString_839(compiler::CodeAssemblerState* state_, compiler::TNode<JSStringIterator> p_o, compiler::TNode<String> p_v);
compiler::TNode<Smi> LoadJSStringIteratorNextIndex_840(compiler::CodeAssemblerState* state_, compiler::TNode<JSStringIterator> p_o);
void StoreJSStringIteratorNextIndex_841(compiler::CodeAssemblerState* state_, compiler::TNode<JSStringIterator> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadTemplateInfoTag_842(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoTag_843(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTemplateInfoSerialNumber_844(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoSerialNumber_845(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadTemplateInfoNumberOfProperties_846(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoNumberOfProperties_847(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadTemplateInfoPropertyList_848(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoPropertyList_849(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTemplateInfoPropertyAccessors_850(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoPropertyAccessors_851(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadTemplateObjectDescriptionRawStrings_852(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateObjectDescription> p_o);
void StoreTemplateObjectDescriptionRawStrings_853(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateObjectDescription> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<FixedArray> LoadTemplateObjectDescriptionCookedStrings_854(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateObjectDescription> p_o);
void StoreTemplateObjectDescriptionCookedStrings_855(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateObjectDescription> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataPrototypeTemplate_856(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataPrototypeTemplate_857(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataPrototypeProviderTemplate_858(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataPrototypeProviderTemplate_859(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataParentTemplate_860(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataParentTemplate_861(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataNamedPropertyHandler_862(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataNamedPropertyHandler_863(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataIndexedPropertyHandler_864(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataIndexedPropertyHandler_865(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataInstanceTemplate_866(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataInstanceTemplate_867(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataInstanceCallHandler_868(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataInstanceCallHandler_869(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataAccessCheckInfo_870(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataAccessCheckInfo_871(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoCallCode_872(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoCallCode_873(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoClassName_874(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoClassName_875(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoSignature_876(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoSignature_877(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadFunctionTemplateInfoRareData_878(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoRareData_879(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoSharedFunctionInfo_880(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoSharedFunctionInfo_881(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadFunctionTemplateInfoFlag_882(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoFlag_883(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadFunctionTemplateInfoLength_884(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoLength_885(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoCachedPropertyName_886(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoCachedPropertyName_887(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadObjectTemplateInfoConstructor_888(compiler::CodeAssemblerState* state_, compiler::TNode<ObjectTemplateInfo> p_o);
void StoreObjectTemplateInfoConstructor_889(compiler::CodeAssemblerState* state_, compiler::TNode<ObjectTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadObjectTemplateInfoData_890(compiler::CodeAssemblerState* state_, compiler::TNode<ObjectTemplateInfo> p_o);
void StoreObjectTemplateInfoData_891(compiler::CodeAssemblerState* state_, compiler::TNode<ObjectTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadPropertyArrayLengthAndHash_892(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyArray> p_o);
void StorePropertyArrayLengthAndHash_893(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyArray> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Name> LoadPropertyCellName_894(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o);
void StorePropertyCellName_895(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o, compiler::TNode<Name> p_v);
compiler::TNode<Smi> LoadPropertyCellPropertyDetailsRaw_896(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o);
void StorePropertyCellPropertyDetailsRaw_897(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadPropertyCellValue_898(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o);
void StorePropertyCellValue_899(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o, compiler::TNode<Object> p_v);
compiler::TNode<WeakFixedArray> LoadPropertyCellDependentCode_900(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o);
void StorePropertyCellDependentCode_901(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o, compiler::TNode<WeakFixedArray> p_v);
compiler::TNode<RawPtrT> LoadJSDataViewDataPointer_902(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataView> p_o);
void StoreJSDataViewDataPointer_903(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataView> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<Object> LoadInterceptorInfoGetter_904(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoGetter_905(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoSetter_906(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoSetter_907(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoQuery_908(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoQuery_909(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoDescriptor_910(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoDescriptor_911(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoDeleter_912(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoDeleter_913(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoEnumerator_914(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoEnumerator_915(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoDefiner_916(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoDefiner_917(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoData_918(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoData_919(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadInterceptorInfoFlags_920(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoFlags_921(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadAccessCheckInfoCallback_922(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoCallback_923(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessCheckInfoNamedInterceptor_924(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoNamedInterceptor_925(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessCheckInfoIndexedInterceptor_926(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoIndexedInterceptor_927(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessCheckInfoData_928(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoData_929(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadArrayBoilerplateDescriptionFlags_930(compiler::CodeAssemblerState* state_, compiler::TNode<ArrayBoilerplateDescription> p_o);
void StoreArrayBoilerplateDescriptionFlags_931(compiler::CodeAssemblerState* state_, compiler::TNode<ArrayBoilerplateDescription> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<FixedArrayBase> LoadArrayBoilerplateDescriptionConstantElements_932(compiler::CodeAssemblerState* state_, compiler::TNode<ArrayBoilerplateDescription> p_o);
void StoreArrayBoilerplateDescriptionConstantElements_933(compiler::CodeAssemblerState* state_, compiler::TNode<ArrayBoilerplateDescription> p_o, compiler::TNode<FixedArrayBase> p_v);
compiler::TNode<Smi> LoadAliasedArgumentsEntryAliasedContextSlot_934(compiler::CodeAssemblerState* state_, compiler::TNode<AliasedArgumentsEntry> p_o);
void StoreAliasedArgumentsEntryAliasedContextSlot_935(compiler::CodeAssemblerState* state_, compiler::TNode<AliasedArgumentsEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadCellValue_936(compiler::CodeAssemblerState* state_, compiler::TNode<Cell> p_o);
void StoreCellValue_937(compiler::CodeAssemblerState* state_, compiler::TNode<Cell> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerSmiHandler_938(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerSmiHandler_939(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerValidityCell_940(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerValidityCell_941(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerData1_942(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerData1_943(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerData2_944(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerData2_945(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerData3_946(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerData3_947(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<JSFunction> LoadJSGeneratorObjectFunction_948(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectFunction_949(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<JSFunction> p_v);
compiler::TNode<Context> LoadJSGeneratorObjectContext_950(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectContext_951(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Context> p_v);
compiler::TNode<Object> LoadJSGeneratorObjectReceiver_952(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectReceiver_953(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSGeneratorObjectInputOrDebugPos_954(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectInputOrDebugPos_955(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadJSGeneratorObjectResumeMode_956(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectResumeMode_957(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadJSGeneratorObjectContinuation_958(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectContinuation_959(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<FixedArray> LoadJSGeneratorObjectParametersAndRegisters_960(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectParametersAndRegisters_961(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<JSPromise> LoadJSAsyncFunctionObjectPromise_962(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFunctionObject> p_o);
void StoreJSAsyncFunctionObjectPromise_963(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFunctionObject> p_o, compiler::TNode<JSPromise> p_v);
compiler::TNode<HeapObject> LoadJSAsyncGeneratorObjectQueue_964(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncGeneratorObject> p_o);
void StoreJSAsyncGeneratorObjectQueue_965(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncGeneratorObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadJSAsyncGeneratorObjectIsAwaiting_966(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncGeneratorObject> p_o);
void StoreJSAsyncGeneratorObjectIsAwaiting_967(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncGeneratorObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadJSPromiseReactionsOrResult_968(compiler::CodeAssemblerState* state_, compiler::TNode<JSPromise> p_o);
void StoreJSPromiseReactionsOrResult_969(compiler::CodeAssemblerState* state_, compiler::TNode<JSPromise> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadJSPromiseFlags_970(compiler::CodeAssemblerState* state_, compiler::TNode<JSPromise> p_o);
void StoreJSPromiseFlags_971(compiler::CodeAssemblerState* state_, compiler::TNode<JSPromise> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Foreign> LoadCallbackTaskCallback_972(compiler::CodeAssemblerState* state_, compiler::TNode<CallbackTask> p_o);
void StoreCallbackTaskCallback_973(compiler::CodeAssemblerState* state_, compiler::TNode<CallbackTask> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<Foreign> LoadCallbackTaskData_974(compiler::CodeAssemblerState* state_, compiler::TNode<CallbackTask> p_o);
void StoreCallbackTaskData_975(compiler::CodeAssemblerState* state_, compiler::TNode<CallbackTask> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<JSReceiver> LoadCallableTaskCallable_976(compiler::CodeAssemblerState* state_, compiler::TNode<CallableTask> p_o);
void StoreCallableTaskCallable_977(compiler::CodeAssemblerState* state_, compiler::TNode<CallableTask> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Context> LoadCallableTaskContext_978(compiler::CodeAssemblerState* state_, compiler::TNode<CallableTask> p_o);
void StoreCallableTaskContext_979(compiler::CodeAssemblerState* state_, compiler::TNode<CallableTask> p_o, compiler::TNode<Context> p_v);
compiler::TNode<Smi> LoadStackFrameInfoLineNumber_980(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoLineNumber_981(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadStackFrameInfoColumnNumber_982(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoColumnNumber_983(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadStackFrameInfoPromiseAllIndex_984(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoPromiseAllIndex_985(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadStackFrameInfoScriptId_986(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoScriptId_987(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoScriptName_988(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoScriptName_989(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoScriptNameOrSourceUrl_990(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoScriptNameOrSourceUrl_991(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoFunctionName_992(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoFunctionName_993(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoMethodName_994(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoMethodName_995(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoTypeName_996(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoTypeName_997(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoEvalOrigin_998(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoEvalOrigin_999(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoWasmModuleName_1000(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoWasmModuleName_1001(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadStackFrameInfoWasmInstance_1002(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoWasmInstance_1003(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadStackFrameInfoFlag_1004(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoFlag_1005(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadStackTraceFrameFrameArray_1006(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameFrameArray_1007(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadStackTraceFrameFrameIndex_1008(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameFrameIndex_1009(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadStackTraceFrameFrameInfo_1010(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameFrameInfo_1011(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadStackTraceFrameId_1012(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameId_1013(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadClassPositionsStart_1014(compiler::CodeAssemblerState* state_, compiler::TNode<ClassPositions> p_o);
void StoreClassPositionsStart_1015(compiler::CodeAssemblerState* state_, compiler::TNode<ClassPositions> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadClassPositionsEnd_1016(compiler::CodeAssemblerState* state_, compiler::TNode<ClassPositions> p_o);
void StoreClassPositionsEnd_1017(compiler::CodeAssemblerState* state_, compiler::TNode<ClassPositions> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Code> LoadWasmExportedFunctionDataWrapperCode_1018(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataWrapperCode_1019(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Code> p_v);
compiler::TNode<JSObject> LoadWasmExportedFunctionDataInstance_1020(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataInstance_1021(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<JSObject> p_v);
compiler::TNode<Smi> LoadWasmExportedFunctionDataJumpTableOffset_1022(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataJumpTableOffset_1023(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWasmExportedFunctionDataFunctionIndex_1024(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataFunctionIndex_1025(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadWasmExportedFunctionDataCWrapperCode_1026(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataCWrapperCode_1027(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadWasmExportedFunctionDataWasmCallTarget_1028(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataWasmCallTarget_1029(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadWasmExportedFunctionDataPackedArgsSize_1030(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataPackedArgsSize_1031(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<JSReceiver> LoadWasmJSFunctionDataCallable_1032(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataCallable_1033(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Code> LoadWasmJSFunctionDataWrapperCode_1034(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataWrapperCode_1035(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<Code> p_v);
compiler::TNode<Smi> LoadWasmJSFunctionDataSerializedReturnCount_1036(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataSerializedReturnCount_1037(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWasmJSFunctionDataSerializedParameterCount_1038(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataSerializedParameterCount_1039(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<ByteArray> LoadWasmJSFunctionDataSerializedSignature_1040(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataSerializedSignature_1041(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<RawPtrT> LoadWasmCapiFunctionDataCallTarget_1042(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataCallTarget_1043(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<Foreign> LoadWasmCapiFunctionDataEmbedderData_1044(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataEmbedderData_1045(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<Code> LoadWasmCapiFunctionDataWrapperCode_1046(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataWrapperCode_1047(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<Code> p_v);
compiler::TNode<ByteArray> LoadWasmCapiFunctionDataSerializedSignature_1048(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataSerializedSignature_1049(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<Uint32T> LoadWasmIndirectFunctionTableSize_1050(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableSize_1051(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<Uint32T> LoadWasmIndirectFunctionTableOptionalPadding_1052(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableOptionalPadding_1053(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<RawPtrT> LoadWasmIndirectFunctionTableSigIds_1054(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableSigIds_1055(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<RawPtrT> LoadWasmIndirectFunctionTableTargets_1056(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableTargets_1057(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<HeapObject> LoadWasmIndirectFunctionTableManagedNativeAllocations_1058(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableManagedNativeAllocations_1059(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<FixedArray> LoadWasmIndirectFunctionTableRefs_1060(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o);
void StoreWasmIndirectFunctionTableRefs_1061(compiler::CodeAssemblerState* state_, compiler::TNode<WasmIndirectFunctionTable> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<JSObject> LoadWasmDebugInfoInstance_1062(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoInstance_1063(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<JSObject> p_v);
compiler::TNode<HeapObject> LoadWasmDebugInfoInterpreterHandle_1064(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoInterpreterHandle_1065(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmDebugInfoLocalsNames_1066(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoLocalsNames_1067(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmDebugInfoCWasmEntries_1068(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoCWasmEntries_1069(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmDebugInfoCWasmEntryMap_1070(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoCWasmEntryMap_1071(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadWasmExceptionTagIndex_1072(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionTag> p_o);
void StoreWasmExceptionTagIndex_1073(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionTag> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadAsyncGeneratorRequestNext_1074(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestNext_1075(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadAsyncGeneratorRequestResumeMode_1076(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestResumeMode_1077(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadAsyncGeneratorRequestValue_1078(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestValue_1079(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<Object> p_v);
compiler::TNode<JSPromise> LoadAsyncGeneratorRequestPromise_1080(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestPromise_1081(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<JSPromise> p_v);
compiler::TNode<HeapObject> LoadSourceTextModuleInfoEntryExportName_1082(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryExportName_1083(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadSourceTextModuleInfoEntryLocalName_1084(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryLocalName_1085(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadSourceTextModuleInfoEntryImportName_1086(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryImportName_1087(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadSourceTextModuleInfoEntryModuleRequest_1088(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryModuleRequest_1089(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadSourceTextModuleInfoEntryCellIndex_1090(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryCellIndex_1091(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadSourceTextModuleInfoEntryBegPos_1092(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryBegPos_1093(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadSourceTextModuleInfoEntryEndPos_1094(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o);
void StoreSourceTextModuleInfoEntryEndPos_1095(compiler::CodeAssemblerState* state_, compiler::TNode<SourceTextModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadPromiseCapabilityPromise_1096(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o);
void StorePromiseCapabilityPromise_1097(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadPromiseCapabilityResolve_1098(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o);
void StorePromiseCapabilityResolve_1099(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadPromiseCapabilityReject_1100(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o);
void StorePromiseCapabilityReject_1101(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadPromiseReactionNext_1102(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o);
void StorePromiseReactionNext_1103(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionRejectHandler_1104(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o);
void StorePromiseReactionRejectHandler_1105(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionFulfillHandler_1106(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o);
void StorePromiseReactionFulfillHandler_1107(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionPromiseOrCapability_1108(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o);
void StorePromiseReactionPromiseOrCapability_1109(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadPromiseReactionJobTaskArgument_1110(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskArgument_1111(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Context> LoadPromiseReactionJobTaskContext_1112(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskContext_1113(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<Context> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionJobTaskHandler_1114(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskHandler_1115(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionJobTaskPromiseOrCapability_1116(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskPromiseOrCapability_1117(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Context> LoadPromiseResolveThenableJobTaskContext_1118(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskContext_1119(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<Context> p_v);
compiler::TNode<JSPromise> LoadPromiseResolveThenableJobTaskPromiseToResolve_1120(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskPromiseToResolve_1121(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<JSPromise> p_v);
compiler::TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThen_1122(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskThen_1123(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThenable_1124(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskThenable_1125(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<HeapObject> LoadJSRegExpData_1126(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o);
void StoreJSRegExpData_1127(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadJSRegExpSource_1128(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o);
void StoreJSRegExpSource_1129(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadJSRegExpFlags_1130(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o);
void StoreJSRegExpFlags_1131(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSRegExpResultIndex_1132(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultIndex_1133(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSRegExpResultInput_1134(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultInput_1135(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSRegExpResultGroups_1136(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultGroups_1137(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSRegExpStringIteratorIteratingRegExp_1138(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o);
void StoreJSRegExpStringIteratorIteratingRegExp_1139(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o, compiler::TNode<Object> p_v);
compiler::TNode<String> LoadJSRegExpStringIteratorIteratedString_1140(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o);
void StoreJSRegExpStringIteratorIteratedString_1141(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o, compiler::TNode<String> p_v);
compiler::TNode<Smi> LoadJSRegExpStringIteratorFlags_1142(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o);
void StoreJSRegExpStringIteratorFlags_1143(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> _method_RegExpMatchInfo_GetStartOfCapture(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RegExpMatchInfo> p_this, int31_t p_captureIndex);
compiler::TNode<Smi> _method_RegExpMatchInfo_GetEndOfCapture(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RegExpMatchInfo> p_this, int31_t p_captureIndex);
compiler::TNode<Smi> _method_RegExpMatchInfo_NumberOfCaptures(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RegExpMatchInfo> p_this);
compiler::TNode<Object> LoadAccessorInfoName_1144(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoName_1145(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadAccessorInfoFlags_1146(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoFlags_1147(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadAccessorInfoExpectedReceiverType_1148(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoExpectedReceiverType_1149(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorInfoSetter_1150(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoSetter_1151(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorInfoGetter_1152(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoGetter_1153(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorInfoJsGetter_1154(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoJsGetter_1155(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorInfoData_1156(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoData_1157(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorPairGetter_1158(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorPair> p_o);
void StoreAccessorPairGetter_1159(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorPair> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorPairSetter_1160(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorPair> p_o);
void StoreAccessorPairSetter_1161(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorPair> p_o, compiler::TNode<Object> p_v);
compiler::TNode<SharedFunctionInfo> LoadDebugInfoSharedFunctionInfo_1162(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoSharedFunctionInfo_1163(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<SharedFunctionInfo> p_v);
compiler::TNode<Smi> LoadDebugInfoDebuggerHints_1164(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoDebuggerHints_1165(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadDebugInfoScript_1166(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoScript_1167(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadDebugInfoOriginalBytecodeArray_1168(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoOriginalBytecodeArray_1169(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadDebugInfoDebugBytecodeArray_1170(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoDebugBytecodeArray_1171(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<FixedArray> LoadDebugInfoBreakPoints_1172(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoBreakPoints_1173(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Smi> LoadDebugInfoFlags_1174(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoFlags_1175(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadDebugInfoCoverageInfo_1176(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoCoverageInfo_1177(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<SharedFunctionInfo> LoadFeedbackVectorSharedFunctionInfo_1178(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorSharedFunctionInfo_1179(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<SharedFunctionInfo> p_v);
compiler::TNode<Object> LoadFeedbackVectorOptimizedCodeWeakOrSmi_1180(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorOptimizedCodeWeakOrSmi_1181(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadFeedbackVectorClosureFeedbackCellArray_1182(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorClosureFeedbackCellArray_1183(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Int32T> LoadFeedbackVectorLength_1184(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorLength_1185(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadFeedbackVectorInvocationCount_1186(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorInvocationCount_1187(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadFeedbackVectorProfilerTicks_1188(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorProfilerTicks_1189(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Uint32T> LoadFeedbackVectorPadding_1190(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorPadding_1191(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<HeapObject> LoadFeedbackCellValue_1192(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackCell> p_o);
void StoreFeedbackCellValue_1193(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Int32T> LoadFeedbackCellInterruptBudget_1194(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackCell> p_o);
void StoreFeedbackCellInterruptBudget_1195(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackCell> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Struct> LoadAllocationMementoAllocationSite_1196(compiler::CodeAssemblerState* state_, compiler::TNode<AllocationMemento> p_o);
void StoreAllocationMementoAllocationSite_1197(compiler::CodeAssemblerState* state_, compiler::TNode<AllocationMemento> p_o, compiler::TNode<Struct> p_v);
compiler::TNode<Foreign> LoadWasmModuleObjectNativeModule_1198(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectNativeModule_1199(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<FixedArray> LoadWasmModuleObjectExportWrappers_1200(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectExportWrappers_1201(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Script> LoadWasmModuleObjectScript_1202(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectScript_1203(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<Script> p_v);
compiler::TNode<WeakArrayList> LoadWasmModuleObjectWeakInstanceList_1204(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectWeakInstanceList_1205(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<WeakArrayList> p_v);
compiler::TNode<HeapObject> LoadWasmModuleObjectAsmJsOffsetTable_1206(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectAsmJsOffsetTable_1207(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmModuleObjectBreakPointInfos_1208(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectBreakPointInfos_1209(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<FixedArray> LoadWasmTableObjectEntries_1210(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o);
void StoreWasmTableObjectEntries_1211(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Object> LoadWasmTableObjectMaximumLength_1212(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o);
void StoreWasmTableObjectMaximumLength_1213(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadWasmTableObjectDispatchTables_1214(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o);
void StoreWasmTableObjectDispatchTables_1215(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Smi> LoadWasmTableObjectRawType_1216(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o);
void StoreWasmTableObjectRawType_1217(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<JSArrayBuffer> LoadWasmMemoryObjectArrayBuffer_1218(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o);
void StoreWasmMemoryObjectArrayBuffer_1219(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o, compiler::TNode<JSArrayBuffer> p_v);
compiler::TNode<Smi> LoadWasmMemoryObjectMaximumPages_1220(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o);
void StoreWasmMemoryObjectMaximumPages_1221(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadWasmMemoryObjectInstances_1222(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o);
void StoreWasmMemoryObjectInstances_1223(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmGlobalObjectUntaggedBuffer_1224(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectUntaggedBuffer_1225(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmGlobalObjectTaggedBuffer_1226(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectTaggedBuffer_1227(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadWasmGlobalObjectOffset_1228(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectOffset_1229(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWasmGlobalObjectFlags_1230(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectFlags_1231(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<ByteArray> LoadWasmExceptionObjectSerializedSignature_1232(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionObject> p_o);
void StoreWasmExceptionObjectSerializedSignature_1233(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionObject> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<HeapObject> LoadWasmExceptionObjectExceptionTag_1234(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionObject> p_o);
void StoreWasmExceptionObjectExceptionTag_1235(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Foreign> LoadAsmWasmDataManagedNativeModule_1236(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o);
void StoreAsmWasmDataManagedNativeModule_1237(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<FixedArray> LoadAsmWasmDataExportWrappers_1238(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o);
void StoreAsmWasmDataExportWrappers_1239(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<ByteArray> LoadAsmWasmDataAsmJsOffsetTable_1240(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o);
void StoreAsmWasmDataAsmJsOffsetTable_1241(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<HeapNumber> LoadAsmWasmDataUsesBitset_1242(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o);
void StoreAsmWasmDataUsesBitset_1243(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o, compiler::TNode<HeapNumber> p_v);
compiler::TNode<NativeContext> LoadJSFinalizationGroupNativeContext_1244(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupNativeContext_1245(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<NativeContext> p_v);
compiler::TNode<Object> LoadJSFinalizationGroupCleanup_1246(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupCleanup_1247(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadJSFinalizationGroupActiveCells_1248(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupActiveCells_1249(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadJSFinalizationGroupClearedCells_1250(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupClearedCells_1251(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadJSFinalizationGroupKeyMap_1252(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupKeyMap_1253(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadJSFinalizationGroupNext_1254(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupNext_1255(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadJSFinalizationGroupFlags_1256(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o);
void StoreJSFinalizationGroupFlags_1257(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroup> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<JSFinalizationGroup> LoadJSFinalizationGroupCleanupIteratorFinalizationGroup_1258(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroupCleanupIterator> p_o);
void StoreJSFinalizationGroupCleanupIteratorFinalizationGroup_1259(compiler::CodeAssemblerState* state_, compiler::TNode<JSFinalizationGroupCleanupIterator> p_o, compiler::TNode<JSFinalizationGroup> p_v);
compiler::TNode<HeapObject> LoadWeakCellFinalizationGroup_1260(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellFinalizationGroup_1261(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWeakCellTarget_1262(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellTarget_1263(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadWeakCellHoldings_1264(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellHoldings_1265(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadWeakCellPrev_1266(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellPrev_1267(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWeakCellNext_1268(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellNext_1269(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadWeakCellKey_1270(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellKey_1271(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadWeakCellKeyListPrev_1272(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellKeyListPrev_1273(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWeakCellKeyListNext_1274(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o);
void StoreWeakCellKeyListNext_1275(compiler::CodeAssemblerState* state_, compiler::TNode<WeakCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadJSWeakRefTarget_1276(compiler::CodeAssemblerState* state_, compiler::TNode<JSWeakRef> p_o);
void StoreJSWeakRefTarget_1277(compiler::CodeAssemblerState* state_, compiler::TNode<JSWeakRef> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<FixedArray> LoadBytecodeArrayConstantPool_1278(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayConstantPool_1279(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<ByteArray> LoadBytecodeArrayHandlerTable_1280(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayHandlerTable_1281(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<HeapObject> LoadBytecodeArraySourcePositionTable_1282(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArraySourcePositionTable_1283(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Int32T> LoadBytecodeArrayFrameSize_1284(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayFrameSize_1285(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadBytecodeArrayParameterSize_1286(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayParameterSize_1287(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadBytecodeArrayIncomingNewTargetOrGeneratorRegister_1288(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayIncomingNewTargetOrGeneratorRegister_1289(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int8T> LoadBytecodeArrayOsrNestingLevel_1290(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayOsrNestingLevel_1291(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int8T> p_v);
compiler::TNode<Int8T> LoadBytecodeArrayBytecodeAge_1292(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o);
void StoreBytecodeArrayBytecodeAge_1293(compiler::CodeAssemblerState* state_, compiler::TNode<BytecodeArray> p_o, compiler::TNode<Int8T> p_v);
compiler::TNode<HeapObject> Cast10HeapObject_1375(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Uint32T> Convert8ATuint327ATuint8_1376(compiler::CodeAssemblerState* state_, compiler::TNode<Uint8T> p_i);
compiler::TNode<Uint32T> Convert8ATuint328ATuint16_1377(compiler::CodeAssemblerState* state_, compiler::TNode<Uint16T> p_i);
compiler::TNode<Uint32T> Convert8ATuint328ATuint31_1378(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_i);
compiler::TNode<JSFunction> UnsafeCast10JSFunction_1379(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSReceiver> UnsafeCast13ATConstructor_1380(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<Map> UnsafeCast3Map_1381(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSReceiver> UnsafeCast71UT19ATCallableApiObject17ATCallableJSProxy15JSBoundFunction10JSFunction_1382(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSArray> Cast7JSArray_1383(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<BoolT> Is13ATFastJSArray20UT5ATSmi10HeapObject_1384(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<BoolT> Is20ATFastJSArrayForRead20UT5ATSmi10HeapObject_1385(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<BoolT> Is34ATFastJSArrayWithNoCustomIteration20UT5ATSmi10HeapObject_1386(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<BoolT> Is41ATFastJSArrayForReadWithNoCustomIteration20UT5ATSmi10HeapObject_1387(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<Float64T> Convert9ATfloat6417ATconstexpr_int31_1388(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<JSArray> Cast41ATFastJSArrayForReadWithNoCustomIteration_1430(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
}  // namespace internal
}  // namespace v8

#endif  // V8_GEN_TORQUE_GENERATED_SRC_BUILTINS_BASE_TQ_H_
