/*! @brief 子进程对象

 ```JavaScript
 var child_process = require("child_process");
 var child = child_process.spawn("ls");
 ```
 */
interface ChildProcess : EventEmitter
{
    /*! @brief 杀掉当前对象指向的进程，并传递信号
      @param signal 传递的信号
     */
    kill(Integer signal);

    /*! @brief 杀掉当前对象指向的进程，并传递信号
      @param signal 传递的信号
     */
    kill(String signal);

    /*! @brief 等待当前对象指向的进程结束，并返回进程结束代码
      @return 进程的结束代码
     */
    Integer join() async;

    /*! @brief 查询与子进程的管道是否正常连接 */
    readonly Boolean connected;

    /*! @brief 关闭与子进程的 ipc 管道 */
    disconnect();

    /*! @brief 向当前子进程发送一个消息
     @param msg 指定发送的消息
    */
    send(Value msg);

    /*! @brief 查询当前进程占用的内存和花费的时间

     内存报告生成类似以下结果：
     ```JavaScript
     {
       "user": 132379,
       "system": 50507,
       "rss": 8622080
     }
     ```
     其中：
     - user 返回进程在用户代码中花费的时间，单位为微秒值（百万分之一秒）
     - system 返回进程在系统代码中花费的时间，单位为微秒值（百万分之一秒）
     - rss 返回进程当前占用物理内存大小
     @return 返回包含时间报告
     */
    Object usage();

    /*! @brief 读取当前对象指向的进程的 id
     */
    readonly Integer pid;

    /*! @brief 查询和设置当前进程的退出码 */
    readonly Integer exitCode;

    /*! @brief 读取当前对象指向的进程的标准输入对象
     */
    readonly Stream stdin;

    /*! @brief 读取当前对象指向的进程的标准输出对象
     */
    readonly Stream stdout;

    /*! @brief 读取当前对象指向的进程的标准错误对象
     */
    readonly Stream stderr;

    /*! @brief 查询和绑定进程退出事件，相当于 on("exit", func); */
    Function onexit;

    /*! @brief 查询和绑定子进程消息事件，相当于 on("message", func); */
    Function onmessage;
};
